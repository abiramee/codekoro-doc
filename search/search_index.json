{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CodeKoro User Documentation","text":"<p>CodeKoro is an online judge meticulously crafted for the brilliant minds of the United International University (UIU) community. This cutting-edge platform is designed to elevate coding competitions, foster collaborative learning, and showcase the programming prowess of UIU students on the global stage.</p>"},{"location":"#home-page","title":"Home Page","text":"<p>You can access the Home page from here: http://localhost:5173/</p> <p>Welcome to CodeKoros's dynamic home page, where the world of coding excellence unfolds before you. This user-friendly interface is intelligently divided into three key subparts, each catering to a distinct aspect of your coding journey: Contests, Problems, and Ranking.</p>"},{"location":"#contests","title":"Contests:","text":"<p> Dive into the heart of competition with the \"Contests\" section. Discover a thrilling array of coding challenges, carefully curated to test and enhance your skills. From time-bound coding marathons to thematic contests, this section is where the UIU coding community comes alive. Stay tuned for announcements, register for upcoming contests, and embark on an exhilarating coding adventure.</p>"},{"location":"#problemset","title":"ProblemSet:","text":"<p> In the \"ProblemSet\" section, find a treasure trove of coding challenges designed to cater to all skill levels. Whether you're a novice coder looking to sharpen your basics or an experienced algorithm maestro seeking a new conquest, this section has something for everyone. Explore a wide range of problems, each accompanied by detailed explanations and interactive tutorials. CodeKoro is not just about contests; it's about continuous learning, and the Problems section is your gateway to mastery.</p>"},{"location":"#ranking","title":"Ranking:","text":"<p> Track your progress and witness the rise of coding stars in the \"Ranking\" section. This dynamic leaderboard showcases the real-time standings of participants in ongoing contests, providing an instant snapshot of the CodeKoros's competitive landscape. Strive for the top positions, celebrate your achievements, and benchmark your skills against peers. The Ranking section is not just about competition; it's a motivational tool, inspiring you to reach new coding heights.</p>"},{"location":"#authntication","title":"Authntication","text":""},{"location":"#sing-up","title":"Sing up","text":"<p> Welcome to the gateway of endless coding possibilities \u2013 the CodeKoro Sign-Up Page. This is where your journey into the vibrant world of coding excellence begins. Our user-friendly and intuitive sign-up process ensures that joining the CodeKoro community is a smooth and enjoyable experience.</p>"},{"location":"#sign-in","title":"Sign In","text":"<p> Effortlessly access the CodeKoro community with our streamlined Sign-In. Securely sign in using your email and password or opt for social authentication. Forgot your password? No worries \u2013 recovery is a click away. Once in, explore contests, track progress, and engage with the global coding community. Experience a user-friendly interface designed for efficiency. Elevate your coding journey \u2013 Sign In to CodeKoro today!</p>"},{"location":"#codekoro-contest-arena","title":"CodeKoro Contest Arena","text":"<p>Welcome to the heart of CodeKoro, our Contest Arena! Immerse yourself in the thrill of coding competitions with four distinct subparts designed to make your experience seamless and xhilarating: Problems, Submit, My Submission, and Standings.</p>"},{"location":"#problems","title":"Problems","text":"<p> Explore the diverse and intellectually stimulating world of coding challenges in the \"Problems\" section. Engage with carefully curated problem sets that cater to all skill levels. Each challenge is a gateway to honing your coding prowess, offering a unique opportunity to expand your knowledge and skills.</p>"},{"location":"#problem-statemen","title":"Problem Statemen","text":"<p> Welcome to the Problem Statement Page on CodeKoro, where the art of coding meets the precision of problem-solving. This dedicated page is the gateway to a world of challenges, providing participants with a comprehensive understanding of the coding puzzle at hand.</p>"},{"location":"#submit","title":"Submit","text":"<p> Ready to showcase your coding finesse? Navigate to the \"Submit\" section, where you can effortlessly submit your solutions to the contest problems. Our user-friendly interface ensures a smooth submission process, allowing you to focus on what you do best\u2014crafting elegant and efficient code solutions.</p>"},{"location":"#my-submission","title":"My Submission","text":"<p> Keep track of your coding journey in the \"My Submission\" section. Access a comprehensive overview of your submitted solutions, monitor their status, and receive real-time feedback. Whether you're celebrating success or learning from challenges, this section is your personalized dashboard for tracking your progress through the contest.</p>"},{"location":"#standings","title":"Standings","text":"<p> Experience the thrill of competition unfold in real-time with the \"Standings\" section. Witness the dynamic leaderboard, showcasing the ranking of participants as they navigate through the contest challenges. Stay updated on your position, celebrate achievements, and revel in the spirit of healthy competition.</p>"},{"location":"ajax-documentation/","title":"Ajax Documentation","text":""},{"location":"ajax-documentation/#abir-hossain-amee","title":"Abir Hossain Amee","text":""},{"location":"ajax-documentation/#rank-filter","title":"Rank Filter","text":"<p>Rank is filtered with loadig the whole page. It's only load the specific part of the screen. </p>"},{"location":"ajax-documentation/#mysubmissionns","title":"Mysubmissionns","text":"<p>Every submission of an user shown here. And it updated after a time inverval automically.</p>"},{"location":"ajax-documentation/#standings","title":"Standings","text":"<p>Standing of a contest showed in this module. It updates with a interval of time without load the whole page again. </p>"},{"location":"ajax-documentation/#sara-ferdous-khan","title":"Sara Ferdous Khan","text":""},{"location":"ajax-documentation/#all-problems","title":"All Problems","text":"<p>Fetching all the problems from server without loading the whole page.</p>"},{"location":"ajax-documentation/#problems-of-a-contest","title":"Problems Of a Contest","text":"<p>Fetching the problems of a contest from server without loading the whole page.</p>"},{"location":"ajax-documentation/#time-left","title":"Time Left","text":"<p>Fetching the time left to finish the contest without loading the whole page.</p>"},{"location":"ajax-documentation/#iftekhar-hossain","title":"Iftekhar Hossain","text":""},{"location":"ajax-documentation/#contest-page","title":"Contest Page","text":"<p> Fetching all the contest information from the server</p>"},{"location":"ajax-documentation/#problem-statement","title":"Problem Statement","text":"<p> Fetching the problem statement and shown without loading the whole page</p>"},{"location":"ajax-documentation/#stress-test","title":"Stress Test","text":"<p> Fetching the metrics of stress from server and showed without loading the whole page again. </p>"},{"location":"code-documentation/","title":"Code Documentation","text":""},{"location":"code-documentation/#introduction","title":"Introduction","text":"<p>Welcome to the CodeKoro Code Documentation, your comprehensive guide to the architecture and functionalities of CodeKoro. CodeKoro comprises three essential modules: Frontend, Backend, and Compiler. Each module plays a crucial role in delivering a seamless and powerful coding experience.</p>"},{"location":"code-documentation/#frontend","title":"Frontend","text":"<ul> <li>Technology: Built with React</li> <li>Description: The Frontend Module serves as the user interface, providing an interactive and intuitive platform for participants. Leveraging React, it ensures a responsive and dynamic experience, enabling users to navigate through contests, problems, and their personalized dashboards effortlessly.</li> </ul>"},{"location":"code-documentation/#backend","title":"Backend","text":"<ul> <li>Technology: Built with Django</li> <li>Description: The Backend Module serves as the backbone of CodeKoro, handling data storage, user authentication, and business logic. Powered by Django, it ensures a robust and scalable architecture, facilitating seamless communication between the Frontend and the Database. User profiles, contest data, and submissions are managed with efficiency.</li> </ul>"},{"location":"code-documentation/#compiler","title":"Compiler","text":"<ul> <li>Technology: Built with Vanilla Python</li> <li>Description: The Compiler Module is the engine behind the execution of code submissions. Built with Vanilla Python, it ensures the secure and efficient compilation and execution of code, providing real-time feedback to users. This module is pivotal in assessing the correctness and efficiency of participants' solutions.</li> </ul>"},{"location":"code-documentation/#frontend_1","title":"Frontend","text":""},{"location":"code-documentation/#project-structure","title":"Project Structure","text":"<pre><code>    \u251c\u2500\u2500\u2500AdminPage/\n    \u2502   \u251c\u2500\u2500\u2500AddProblemToContest/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500AddProblemToContest.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500ContestPage/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500ContestPage.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500CreateContestPage/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500CreateContestPage.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500CreateProblemPage/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500CreateProblemPage.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500ProblemsPage/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500ProblemPage.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500StressTestPage/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500StressTestPage.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500AdminPage.tsx\n    \u2502   \u251c\u2500\u2500\u2500Create\n    \u2502   \u2514\u2500\u2500\u2500style.css\n    \u251c\u2500\u2500\u2500AuthenticationPage/\n    \u2502   \u251c\u2500\u2500\u2500AuthenticationPage.tsx\n    \u2502   \u251c\u2500\u2500\u2500SignIn.tsx\n    \u2502   \u251c\u2500\u2500\u2500SignUp.tsx\n    \u2502   \u2514\u2500\u2500\u2500style.css\n    \u251c\u2500\u2500\u2500ContestPage/\n    \u2502   \u251c\u2500\u2500\u2500MySubmissions/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500MySubmissions.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500Problems.tsx/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500components/\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500InputOutput.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500problems.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500Standings/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500ProblemItem/\n    \u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500ProblemItem.tsx\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500style.txt\n    \u2502   \u2502   \u251c\u2500\u2500\u2500ProblemNumberItem/\n    \u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500ProblemtNumberItem.tsx\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500style.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Standings.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500SubmitPage.tsx/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500SubmitPage.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500components/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Contests.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500NavbarButtonCon.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500NavbarButtonText.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500NavbarCon.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Stand.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Submission.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500ContestPage.tsx\n    \u2502   \u251c\u2500\u2500\u2500ProblemsList.tsx\n    \u2502   \u2514\u2500\u2500\u2500style.css\n    \u251c\u2500\u2500\u2500HomePage/\n    \u2502   \u251c\u2500\u2500\u2500ProblemSet/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500ProSet.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500ProblemSet.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500Ranking/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Rank.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Ranking.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500components/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500Navbar.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500NavbarButton.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500OnlyContest.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500RecCont.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500RecentContest.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500UpCont.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500UpcommingContest.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500HomePage.tsx\n    \u2502   \u2514\u2500\u2500\u2500style.css\n    \u251c\u2500\u2500\u2500Profilepage/\n    \u2502   \u251c\u2500\u2500\u2500components/\n    \u2502   \u2502   \u251c\u2500\u2500\u2500NavbarProfile.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500NavbarProfileButton.tsx\n    \u2502   \u2502   \u251c\u2500\u2500\u2500SolvedDetails.tsx\n    \u2502   \u2502   \u2514\u2500\u2500\u2500style.css\n    \u2502   \u251c\u2500\u2500\u2500Profilepage.tsx\n    \u2502   \u2514\u2500\u2500\u2500style.css\n    \u251c\u2500\u2500\u2500assets/\n    \u2502   \u251c\u2500\u2500\u2500logo.png\n    \u2502   \u2514\u2500\u2500\u2500react.svg\n    \u251c\u2500\u2500\u2500App.css\n    \u251c\u2500\u2500\u2500App.tsx\n    \u251c\u2500\u2500\u2500Utils.tsx\n    \u251c\u2500\u2500\u2500index.css\n    \u251c\u2500\u2500\u2500main.tsx\n    \u2514\u2500\u2500\u2500vite-env.d.ts\n</code></pre>"},{"location":"code-documentation/#adminpage","title":"AdminPage","text":""},{"location":"code-documentation/#addproblemtocontest","title":"AddProblemToContest","text":"<pre><code>    &lt;AddProblemToContest /&gt;\n</code></pre>"},{"location":"code-documentation/#problempage","title":"ProblemPage","text":"<pre><code>    &lt;ProblemPage /&gt;\n</code></pre>"},{"location":"code-documentation/#createcontetpae","title":"CreateContetPae","text":"<pre><code>    &lt;CreateContest /&gt;\n</code></pre>"},{"location":"code-documentation/#contestpage","title":"ContestPage","text":"<pre><code>    &lt;CreateContest /&gt;\n</code></pre>"},{"location":"code-documentation/#stresstestpage","title":"StressTestPage","text":"<pre><code>    &lt;StressTestPage /&gt;\n</code></pre>"},{"location":"code-documentation/#createproblem","title":"CreateProblem","text":"<pre><code>    &lt;CreateProblem /&gt;\n</code></pre>"},{"location":"code-documentation/#homepage","title":"HomePage","text":""},{"location":"code-documentation/#onlycontestpage","title":"OnlyContestPage","text":""},{"location":"code-documentation/#upcommingcontest","title":"UpcommingContest","text":"<pre><code>    &lt;UpcommingContest /&gt;\n</code></pre>"},{"location":"code-documentation/#recentcontest","title":"RecentContest","text":"<pre><code>    &lt;RecentContest /&gt;\n</code></pre>"},{"location":"code-documentation/#recentcontest_1","title":"RecentContest","text":"<pre><code>    &lt;RecentContest /&gt;\n</code></pre>"},{"location":"code-documentation/#problemset","title":"Problemset","text":"<pre><code>    &lt;ProblemSet /&gt;\n</code></pre>"},{"location":"code-documentation/#proset","title":"ProSet","text":"<pre><code>    &lt;ProSet problem_id={problem.problem_number} isActive={state.page == 1} name={problem.problem_name} solved={'\ud83e\uddd1\ud83c\udffb ' + problem.solve_count} /&gt; \n</code></pre>"},{"location":"code-documentation/#ranking","title":"Ranking","text":"<pre><code>    &lt;&lt;Ranking/&gt; /&gt;\n</code></pre>"},{"location":"code-documentation/#rank","title":"Rank","text":"<pre><code>    &lt;Rank key={index} position={index + 1} name={r.fullname} contests={r.contest_attend} solved={r.problem_solve} /&gt;\n</code></pre>"},{"location":"code-documentation/#contest-arena","title":"Contest Arena","text":""},{"location":"code-documentation/#problemlist","title":"ProblemList","text":"<pre><code>    &lt;ProblemList id={id + \"\"} pageChanger={detail}/&gt;\n</code></pre>"},{"location":"code-documentation/#problems","title":"Problems","text":"<pre><code>    &lt;Problems id={state.problemId} /&gt;\n</code></pre>"},{"location":"code-documentation/#submit","title":"Submit","text":"<pre><code>     &lt;SubmitPage id={state.problemId + \"\"} contest={id + \"\"}/&gt;\n</code></pre>"},{"location":"code-documentation/#mysubmission","title":"MySubmission","text":"<pre><code>     &lt;MySubmissions contest={id + \"\"}/&gt;\n</code></pre>"},{"location":"code-documentation/#standing","title":"Standing","text":"<pre><code>     &lt;Standigs contest={id + \"\"}/&gt;\n</code></pre>"},{"location":"code-documentation/#authentication","title":"Authentication","text":""},{"location":"code-documentation/#sign-in","title":"Sign in","text":"<pre><code>     &lt;SignIn /&gt;\n</code></pre>"},{"location":"code-documentation/#sign-in_1","title":"Sign in","text":"<pre><code>     &lt;Sign Up/&gt;\n</code></pre>"},{"location":"code-documentation/#backend_1","title":"Backend","text":""},{"location":"code-documentation/#project-sturcure","title":"Project Sturcure","text":"<pre><code>\u251c\u2500\u2500\u2500.idea/\n\u2502   \u251c\u2500\u2500\u2500inspectionProfiles/\n\u2502   \u2502   \u251c\u2500\u2500\u2500Project_Default.xml\n\u2502   \u2502   \u2514\u2500\u2500\u2500profiles_settings.xml\n\u2502   \u251c\u2500\u2500\u2500.gitignore\n\u2502   \u251c\u2500\u2500\u2500.name\n\u2502   \u251c\u2500\u2500\u2500Backend.iml\n\u2502   \u251c\u2500\u2500\u2500misc.xml\n\u2502   \u251c\u2500\u2500\u2500modules.xml\n\u2502   \u251c\u2500\u2500\u2500vcs.xml\n\u2502   \u2514\u2500\u2500\u2500workspace.xml\n\u251c\u2500\u2500\u2500Backend/\n\u2502   \u251c\u2500\u2500\u2500.idea/\n\u2502   \u2502   \u251c\u2500\u2500\u2500inspectionProfiles/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500Project_Default.xml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500profiles_settings.xml\n\u2502   \u2502   \u251c\u2500\u2500\u2500.gitignore\n\u2502   \u2502   \u251c\u2500\u2500\u2500Backend.iml\n\u2502   \u2502   \u251c\u2500\u2500\u2500misc.xml\n\u2502   \u2502   \u251c\u2500\u2500\u2500modules.xml\n\u2502   \u2502   \u251c\u2500\u2500\u2500vcs.xml\n\u2502   \u2502   \u2514\u2500\u2500\u2500workspace.xml\n\u2502   \u251c\u2500\u2500\u2500__pycache__/\n\u2502   \u2502   \u251c\u2500\u2500\u2500__init__.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500__init__.cpython-311.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500settings.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500settings.cpython-311.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500urls.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500urls.cpython-311.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500wsgi.cpython-310.pyc\n\u2502   \u2502   \u2514\u2500\u2500\u2500wsgi.cpython-311.pyc\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u251c\u2500\u2500\u2500asgi.py\n\u2502   \u251c\u2500\u2500\u2500celery.py\n\u2502   \u251c\u2500\u2500\u2500settings.py\n\u2502   \u251c\u2500\u2500\u2500urls.py\n\u2502   \u2514\u2500\u2500\u2500wsgi.py\n\u251c\u2500\u2500\u2500CodeKoro/\n\u2502   \u251c\u2500\u2500\u2500__pycache__/\n\u2502   \u2502   \u251c\u2500\u2500\u2500__init__.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500__init__.cpython-311.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500admin.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500admin.cpython-311.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500apps.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500apps.cpython-311.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500authenticate.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500models.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500models.cpython-311.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500serializers.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500urls.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500utils.cpython-310.pyc\n\u2502   \u2502   \u2514\u2500\u2500\u2500views.cpython-310.pyc\n\u2502   \u251c\u2500\u2500\u2500apis/\n\u2502   \u2502   \u251c\u2500\u2500\u2500__pycache__/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500contest.cpython-310.pyc\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500problem.cpython-310.pyc\n\u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500user.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u2500contest.py\n\u2502   \u2502   \u251c\u2500\u2500\u2500problem.py\n\u2502   \u2502   \u2514\u2500\u2500\u2500user.py\n\u2502   \u251c\u2500\u2500\u2500migrations/\n\u2502   \u2502   \u251c\u2500\u2500\u2500__pycache__/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u25000002_alter_country_table.cpython-310.pyc\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u25000003_alter_country_table.cpython-310.pyc\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u25000004_user.cpython-310.pyc\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u25000005_alter_user_email_alter_user_username_and_more.cpython-310.pyc\n\u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500__init__.cpython-310.pyc\n\u2502   \u2502   \u251c\u2500\u2500\u25000001_initial.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000002_languagemodel_submissionmodel_code_and_more.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000003_verdict_submissionmodel_verdict_text_and_more.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000004_rename_contest_id_submissionmodel_contest_and_more.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000005_contestsubmissionmodel.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000006_alter_contestsubmissionmodel_id.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000007_alter_contestsubmissionmodel_unique_together.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000008_contestsubmissionmodel_accepted_and_more.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000009_penaltymodel.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000010_rename_penaltymodel_penaltymodel_penalty.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000011_submissionmodel_solve_count.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000012_remove_submissionmodel_solve_count_and_more.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000013_submissionmodel_time.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000014_usermodel_batch_usermodel_department_usermodel_year.py\n\u2502   \u2502   \u251c\u2500\u2500\u25000015_usermodel_contest_attend_usermodel_problem_solve.py\n\u2502   \u2502   \u2514\u2500\u2500\u2500__init__.py\n\u2502   \u251c\u2500\u2500\u2500.DS_Store\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u251c\u2500\u2500\u2500admin.py\n\u2502   \u251c\u2500\u2500\u2500apps.py\n\u2502   \u251c\u2500\u2500\u2500authenticate.py\n\u2502   \u251c\u2500\u2500\u2500models.py\n\u2502   \u251c\u2500\u2500\u2500serializers.py\n\u2502   \u251c\u2500\u2500\u2500task.py\n\u2502   \u251c\u2500\u2500\u2500tests.py\n\u2502   \u251c\u2500\u2500\u2500urls.py\n\u2502   \u251c\u2500\u2500\u2500utils.py\n\u2502   \u2514\u2500\u2500\u2500views.py\n\u251c\u2500\u2500\u2500cpp/\n\u2502   \u2514\u2500\u2500\u2500.DS_Store\n\u251c\u2500\u2500\u2500.DS_Store\n\u251c\u2500\u2500\u2500country.txt\n\u251c\u2500\u2500\u2500get-pip.py\n\u251c\u2500\u2500\u2500manage.py\n\u2514\u2500\u2500\u2500requirements.txt\n</code></pre>"},{"location":"code-documentation/#contest-api","title":"Contest Api","text":""},{"location":"code-documentation/#create-contest","title":"Create Contest","text":"<pre><code>    def create_contest(request: Request):\n    print(request.data)\n    data = request.data\n    contest = ContestModel(contest_name=data.get('contest_name'), duration=data.get('duration'),\n                           start_at=data['start_at'],\n                           end_at=data['end_at'], schedule_at=data['schedule_at'])\n    contest.save()\n\n    response = Response(\n        create_success_response({\"hello\"}))\n    return response\n</code></pre>"},{"location":"code-documentation/#upcoming-contest","title":"Upcoming Contest","text":"<pre><code>    def upcoming_contest(request: Request):\n    print(request.data)\n    today = datetime.today()\n    print(datetime.now())\n    time = make_aware(datetime.now(), timezone=pytz.timezone(\"Asia/Dhaka\"))\n    contests = ContestModel.objects.filter(start_at__gte=time).all().values()\n\n    for contest in contests:\n        ans = False\n        contest['is_active'] = ans\n        contest['registered'] = ContestRegisterModel.objects.filter(contest_id=contest['id']).count()\n\n    response = Response(\n        create_success_response(contests))\n    return response\n</code></pre>"},{"location":"code-documentation/#all-contest","title":"All Contest","text":"<pre><code>    contests = ContestModel.objects.filter(start_at__gte=time).all().values()\n    response = Response(\n        create_success_response(contests))\n    return response\n</code></pre>"},{"location":"code-documentation/#previous-contest","title":"Previous Contest","text":"<pre><code>    today = datetime.today()\n    time = make_aware(datetime.now(), timezone=pytz.timezone(\"Asia/Dhaka\"))\n    contests = ContestModel.objects.filter(start_at__lte=time).all().values()\n\n    for contest in contests:\n        ans = False\n        # print(contest['id'])\n        contest['is_active'] = ans\n        if UserModel.objects.filter(email=request.user).exists() and ContestRegisterModel.objects.filter(contest_id=contest['id'],\n                                                                                                         user_id=UserModel.objects.get(\n                                                                                                                 email=request.user).id).exists():\n            ans = True\n            contest['is_active'] = ans\n        contest['registered'] = ContestRegisterModel.objects.filter(contest_id=contest['id']).count()\n\n    response = Response(\n        create_success_response(contests))\n    return response\n</code></pre>"},{"location":"code-documentation/#contest-registration","title":"Contest Registration","text":"<pre><code>    data = request.data\n    if UserModel.objects.filter(email=request.user).exists():\n        contest_registration = ContestRegisterModel(contest_id=ContestModel.objects.get(id=data['contest_id']),\n                                                    user_id=UserModel.objects.get(email=request.user))\n        contest_registration.save()\n        return Response(create_success_response({}));\n    return Response(create_error_response(200, {}))\n</code></pre>"},{"location":"code-documentation/#time-left","title":"Time Left","text":"<pre><code>    time_left = ContestModel.objects.filter(id=request.data['contest_id']).first().end_at - timezone.now()\n    time_left = time_left.total_seconds()\n    return Response(create_success_response({\"seconds\": math.floor(time_left)}))\n</code></pre>"},{"location":"code-documentation/#process-analytics","title":"Process Analytics","text":"<pre><code>    def process_analytics(request: Request):\n        process_running = SubmissionModel.objects.filter(verdict_id=6).count()\n        process_queue = SubmissionModel.objects.filter(verdict_id=2).count()\n        process_finished = SubmissionModel.objects.count() - process_running - process_queue\n        return Response(create_success_response({\"running\": process_running, \"queue\": process_queue, \"finished\": process_finished}))\n</code></pre>"},{"location":"code-documentation/#problem-api","title":"Problem API","text":""},{"location":"code-documentation/#craete-problems","title":"Craete Problems","text":"<pre><code>    data = request.data\n    problem = ProblemModel(problem_name=data['problem_name'], problem_statement=data['problem_statement'], input=data['input'],\n                           output=data['output'], problem_number=data['problem_number'], time_limit=data['time_limit'], memory_limit=data['memory_limit'])\n    problem.save()\n\n    for testcase in data['testcases']:\n        TestcaseModel(problem_id=problem, input=testcase['input'], output=testcase['output']).save()\n\n    response = Response(\n        create_success_response({\"hello\"}))\n    return response\n</code></pre>"},{"location":"code-documentation/#get-problems","title":"Get Problems","text":"<pre><code>    response = Response(\n        create_success_response(ProblemModel.objects.all().values()))\n    return response\n</code></pre>"},{"location":"code-documentation/#get-specific-problems","title":"Get Specific Problems","text":"<pre><code>    response = Response(\n        create_success_response(ProblemModel.objects.filter(id=request.data['id']).all().values()))\n    return response\n</code></pre>"},{"location":"code-documentation/#add-problem-to-contest","title":"Add Problem To contest","text":"<pre><code>    def add_problem_to_contest(request: Request):\n        data = request.data\n        ProblemConetestModel(problem_id=ProblemModel.objects.get(id=data['problem_id']), contest_id=ContestModel.objects.get(id=data['contest_id'])).save()\n        response = Response(\n            create_success_response(\"hello\"))\n        return response\n</code></pre>"},{"location":"code-documentation/#get-testcases","title":"Get Testcases","text":"<pre><code>    def get_test_cases(request: Request):\n    data = request.data\n    respose = TestcaseModel.objects.filter(problem_id=data['id']).all().values()\n    return Response(create_success_response(respose))\n</code></pre>"},{"location":"code-documentation/#get-problem-by-contest","title":"Get Problem by Contest","text":"<pre><code>    def contest_problem(request: Request):\n    if str(request.user) != \"AnonymousUser\":\n        print(request.data['id'])\n        if ContestSubmissionModel.objects.filter(user__email=str(request.user), contest_id=request.data['id']).exists() is False:\n            user = UserModel.objects.filter(email=str(request.user)).get()\n            user.contest_attend = user.contest_attend + 1\n            user.save()\n        for problem in ProblemConetestModel.objects.filter(contest_id=request.data['id']):\n            print(problem)\n            if ContestSubmissionModel.objects.filter(contest_id=request.data['id'], user__email=str(request.user), problem_id=problem.problem_id_id).exists() is False:\n                ContestSubmissionModel(contest_id=request.data['id'], user=UserModel.objects.get(email=request.user), problem_id=problem.problem_id_id).save()\n        if PenaltyModel.objects.filter(contest_id=request.data['id'], user__email=str(request.user)).exists() is False:\n            PenaltyModel(contest_id=request.data['id'], user=UserModel.objects.get(email=request.user)).save()\n    data = request.data\n    response = (ProblemConetestModel.objects.filter(contest_id=data['id']).order_by('problem_id__problem_number')\n                .values('problem_id_id', 'problem_id__problem_number', 'problem_id__problem_name', 'problem_id__problem_statement', 'problem_id__input', 'problem_id__output', 'problem_id__memory_limit', 'problem_id__time_limit', 'problem_id__solve_count'))\n    return Response(create_success_response(response))\n</code></pre>"},{"location":"code-documentation/#submission","title":"Submission","text":"<pre><code>    def submission(request: Request):\n    data = request.data\n    print(data)\n    time_passed = timezone.now() - ContestModel.objects.filter(id=request.data['contest_id']).first().start_at\n    time_passed = time_passed.total_seconds()\n    time_passed = f'{int(time_passed / 3600):2}:{int((time_passed / 60) % 60):2}'\n    submission = SubmissionModel(problem_id=request.data['problem_id'],\n                                 contest_id=request.data['contest_id'], code=request.data['code'],\n                                 verdict_id=2, language_id=1, verdict_text=\"In queue\",\n                                 time=time_passed,\n                                 user_id=UserModel.objects.filter(email=request.user).get().id)\n    submission.save()\n    print(submission.id)\n    test_func.delay(submission.id)\n    return Response(create_success_response(SubmissionModel.objects.filter(id=submission.id).values()))\n</code></pre>"},{"location":"code-documentation/#my-submission","title":"My Submission","text":"<pre><code>    def mysubmission(request: Request):\n    data = request.data\n    print(request.user)\n    response = SubmissionModel.objects.filter(contest_id=data['contest_id'], user_id=UserModel.objects.get(email=request.user).id).all().values('problem__problem_name', 'problem_id', 'verdict_text', 'problem__problem_number', 'time')\n    return Response(create_success_response(response))\n</code></pre>"},{"location":"code-documentation/#submission_1","title":"Submission","text":"<pre><code>    def standing(request: Request):\n    data = request.data\n    ranking = PenaltyModel.objects.filter(contest_id=data['contest_id']).order_by('-solve', 'penalty').values('user_id', 'user__fullname', 'solve', 'penalty')\n    for item in ranking:\n        item['problem_status'] = ContestSubmissionModel.objects.filter(contest_id=data['contest_id'], user_id=item['user_id']).order_by('problem__problem_number').values()\n    return Response(create_success_response(ranking))\n</code></pre>"},{"location":"code-documentation/#user-api","title":"USER API","text":""},{"location":"code-documentation/#create-user","title":"Create User","text":"<pre><code>    def create_user(request: Request):\n    data = request.data;\n    email = data.get('email')\n    user_info = email.split('@')\n    batch = \"\"\n    for i in range(len(user_info[0])):\n        if '0' &lt;= user_info[0][i] &lt;= '9':\n            batch = user_info[0][i:i+3]\n            break\n    trimester = \"Spring\"\n    if batch[2] == '2':\n        trimester = \"Summer\"\n    if batch[2] == '3':\n        trimester = \"Fall\"\n\n    user = UserModel(fullname=data.get('fullname'), email=data.get('email'), username=str(random.random()),\n                     gender=data.get('gender'), password=make_password(data.get\n                                                                       ('password')), country=data.get('country'), batch=trimester, year=f'20{batch[0:2]}')\n    user.save()\n    refresh = RefreshToken.for_user(UserModel.objects.get(email=data.get('email')))\n    response = Response(\n        create_success_response({'access': str(refresh.access_token), 'refresh': str(refresh)}))\n    response.set_cookie(\n        key=settings.SIMPLE_JWT['AUTH_COOKIE'],\n        value= str(refresh.access_token),\n        expires=settings.SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'],\n        secure=settings.SIMPLE_JWT['AUTH_COOKIE_SECURE'],\n        httponly=settings.SIMPLE_JWT['AUTH_COOKIE_HTTP_ONLY'],\n        samesite=None\n    )\n    csrf.get_token(request)\n    return response;\n</code></pre>"},{"location":"code-documentation/#sign-in_2","title":"Sign In","text":"<pre><code>    def signin(request: Request):\n    user = UserModel.objects.get(email=request.data.get('email'))\n    if check_password(request.data.get('password'), user.password) is False:\n        return Response(create_error_response(200, {\"hello\": \"gasasd\"}))\n    refresh = RefreshToken.for_user(UserModel.objects.get(email=request.data.get('email')))\n    response = Response(\n        create_success_response({'access': str(refresh.access_token), 'refresh': str(refresh)}))\n    response.set_cookie(\n        key=settings.SIMPLE_JWT['AUTH_COOKIE'],\n        value= str(refresh.access_token),\n        expires=settings.SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'],\n        secure=settings.SIMPLE_JWT['AUTH_COOKIE_SECURE'],\n        httponly=settings.SIMPLE_JWT['AUTH_COOKIE_HTTP_ONLY'],\n        samesite=None\n    )\n    csrf.get_token(request)\n    return response\n</code></pre>"},{"location":"code-documentation/#me","title":"ME","text":"<pre><code>    def me(request: Request):\n    if request.user is None:\n        return Response(create_error_response())\n    return Response(create_success_response({\"me\": str(request.user)}))\n</code></pre>"},{"location":"code-documentation/#get-rank","title":"Get Rank","text":"<pre><code>    def get_rank(request: Request):\n        q = Q()\n        print(request.data)\n        if request.data['gender']:\n            q = q &amp; Q(gender=request.data['gender'])\n        if request.data['year']:\n            q = q &amp; Q(year=request.data['year'])\n        if request.data['batch']:\n            q = q &amp; Q(batch=request.data['batch'])\n\n        return Response(create_success_response(UserModel.objects.filter(q).order_by('-problem_solve', 'contest_attend').values('fullname', 'problem_solve', 'contest_attend')))\n</code></pre>"},{"location":"test-documentation/","title":"Test Documentation","text":""},{"location":"test-documentation/#introduction","title":"Introduction","text":"<p>Unit testing is a fundamental aspect of CodeKoro's testing strategy. Each component of the system undergoes thorough unit testing to ensure that individual functions and modules work as intended. This includes testing the parser, compiler, code executor, and any other core components responsible for code evaluation.</p>"},{"location":"test-documentation/#sara-ferdous-khan","title":"Sara Ferdous Khan","text":""},{"location":"test-documentation/#test-create-user","title":"Test Create User","text":"<pre><code>     email = \"asdasd192032@uiu.bscse.ac.bd\"\n        fullname = \"TEST\"\n        gender = \"M\"\n        password = \"asdasdasd\"\n\n        user = UserModel(email=email, fullname=fullname, gender=gender, password=password)\n        user.save()\n\n        self.assertEquals(user.email, email)\n        self.assertEquals(user.fullname, fullname)\n        self.assertEquals(user.gender, gender)\n</code></pre>"},{"location":"test-documentation/#test-with-no-auth","title":"Test with no Auth","text":"<pre><code>        client = APIClient(enforce_csrf_checks=True)\n        response = client.get('http://127.0.0.1:8000/me/', format='json')\n        self.assertFalse(response.data['success'])\n</code></pre>"},{"location":"test-documentation/#test-with-valid-sign-up","title":"Test with valid Sign Up","text":"<pre><code>        def test_valid_sign_up(self):\n        client = APIClient()\n        response = client.post('http://127.0.0.1:8000/auth/signup/',\n                               {'email': \"skhan193030@bscse.uiu.ac.bd\",\n                                'fullname': \"TEST\",\n                                'gender': \"M\",\n                                'password': \"asdasdasd\"},\n                               format='json')\n        self.assertTrue(response.data['success'])\n</code></pre>"},{"location":"test-documentation/#test-with-invalid-sign-in","title":"Test with invalid Sign in","text":"<pre><code>        client = APIClient()\n        response = client.post('http://127.0.0.1:8000/auth/signin/',\n                               {'email': \"0\",\n                                'password': \"0\"},\n                               format='json')\n        self.assertFalse(response.data['success'])\n</code></pre>"},{"location":"test-documentation/#test-with-incorrect-passoword-sign-in","title":"Test with incorrect passoword Sign in","text":"<pre><code>        client = APIClient()\n        response = client.post('http://127.0.0.1:8000/auth/signin/',\n                               {'email': \"skhan193030@bscse.uiu.ac.bd\",\n                                'password': \"0\"},\n                               format='json')\n        self.assertFalse(response.data['success'])\n</code></pre>"},{"location":"test-documentation/#test-result","title":"Test Result","text":""},{"location":"test-documentation/#abir-hosain-amee","title":"Abir Hosain Amee","text":""},{"location":"test-documentation/#test-create-contest","title":"Test Create Contest","text":"<pre><code>        def test_create_contest(self):\n            client = APIClient(enforce_csrf_checks=True)\n            response = client.post('http://127.0.0.1:8000/contest/', {\n                \"contest_name\": \"ICPC 2070\",\n                \"duration\": 5,\n                \"start_at\": \"2023-12-09 15:00:00\",\n                \"end_at\": \"2023-12-09 17:00:00\",\n                \"schedule_at\": \"09 Dec, 2023\"\n            }, format='json')\n            self.assertTrue(response.data['success'])\n</code></pre>"},{"location":"test-documentation/#test-time","title":"Test Time","text":"<pre><code>        def test_time(self):\n            client = APIClient()\n            response = client.post('http://127.0.0.1:8000/contest/time/',\n                                {'contest_id': 14},\n                                format='json')\n            print(response)\n            self.assertTrue(response)\n</code></pre>"},{"location":"test-documentation/#test-process-analytics-view","title":"Test Process Analytics View","text":"<pre><code>        def test_time(self):\n            client = APIClient()\n            response = client.post('http://127.0.0.1:8000/contest/time/',\n                                {'contest_id': 14},\n                                format='json')\n            print(response)\n            self.assertTrue(response)\n</code></pre>"},{"location":"test-documentation/#test-standings","title":"Test Standings","text":"<pre><code>        def test_standings(self):\n            client = APIClient()\n            response = client.post('http://127.0.0.1:8000/contest/standings/',\n                                {'contest_id': 14},\n                                format='json')\n            print(response)\n            self.assertTrue(response)\n</code></pre>"},{"location":"test-documentation/#test-get-all-contests","title":"Test Get All Contests","text":"<pre><code>        def test_all_contests(self):\n        client = APIClient()\n        response = client.get('http://127.0.0.1:8000/contest/all/',\n                              format='json')\n        self.assertTrue(response)\n</code></pre>"},{"location":"test-documentation/#test-result_1","title":"Test Result","text":""},{"location":"test-documentation/#iftekhar-hossain","title":"Iftekhar Hossain","text":""},{"location":"test-documentation/#test-create-problem","title":"Test Create Problem","text":"<pre><code>        def test_create_problem(self):\n            client = APIClient(enforce_csrf_checks=True)\n            response = client.post('http://127.0.0.1:8000/create-problem/', {\n                \"problem_name\": \"Ones and Twos\",\n                \"problem_statement\": \"asdasdasd\",\n                \"input\": \"asdasd\",\n                \"output\": \"asdasd\",\n                \"problem_number\": \"A\",\n                \"time_limit\": 1,\n                \"memory_limit\": \"256MB\",\n                \"testcases\": [\n                    {\n                        \"input\": \"123123\",\n                        \"output\": \"YES YES NO YES YES NO\"\n                    }\n                ]\n            }, format='json')\n            self.assertTrue(response.data['success'])\n</code></pre>"},{"location":"test-documentation/#test-get-specific-problem","title":"Test Get Specific Problem","text":"<pre><code>        def test_get_specific_problem(self):\n            client = APIClient()\n            response = client.post('http://127.0.0.1:8000/problem-contest/',\n                                {'id': 14},\n                                format='json')\n            print(response)\n            self.assertTrue(response)\n</code></pre>"},{"location":"test-documentation/#test-get-all-problem","title":"Test Get All Problem","text":"<pre><code>        def test_get_specific_problem(self):\n            client = APIClient()\n            response = client.post('http://127.0.0.1:8000/problem-contest/',\n                                {'id': 14},\n                                format='json')\n            print(response)\n            self.assertTrue(response)\n</code></pre>"},{"location":"test-documentation/#test-get-testcases","title":"Test Get TestCases","text":"<pre><code>        def test_get_test_cases(self):\n            client = APIClient()\n            response = client.post('http://127.0.0.1:8000/problem/testcases/',\n                                {'id': 41},\n                                format='json')\n            print(response)\n            self.assertTrue(response)\n</code></pre>"},{"location":"test-documentation/#test-get-rank","title":"Test Get Rank","text":"<pre><code>        def test_get_rank(self):\n            client = APIClient()\n            response = client.post('http://127.0.0.1:8000/rank/', {'gender': '', 'year': '', 'batch': ''},\n                                format='json')\n            self.assertTrue(response)\n</code></pre>"},{"location":"test-documentation/#test-result_2","title":"Test Result","text":""}]}